!function(e){var t={};function a(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,s){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(s,r,function(t){return e[t]}.bind(null,r));return s},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=6)}([function(e,t,a){"use strict";try{self["workbox:core:5.0.0"]&&_()}catch(e){}},function(e,t,a){"use strict";try{self["workbox:precaching:5.0.0"]&&_()}catch(e){}},function(e,t,a){"use strict";try{self["workbox:routing:5.0.0"]&&_()}catch(e){}},function(e,t,a){"use strict";try{self["workbox:strategies:5.0.0"]&&_()}catch(e){}},function(e,t,a){"use strict";try{self["workbox:background-sync:5.0.0"]&&_()}catch(e){}},function(e,t,a){"use strict";try{self["workbox:expiration:5.0.0"]&&_()}catch(e){}},function(e,t,a){"use strict";a.r(t);a(0);const s=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},a=function(a,s){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===a&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[a](...s);const r=e?[]:["%cworkbox",[`background: ${t[a]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[a](...r,...s),"groupCollapsed"===a&&(e=!0),"groupEnd"===a&&(e=!1)},s={},r=Object.keys(t);for(const e of r){const t=e;s[t]=(...e)=>{a(t,e)}}return s})(),r={"invalid-value":({paramName:e,validValueDescription:t,value:a})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an `+`unexpected value. ${t} Received a value of `+`${JSON.stringify(a)}.`},"not-in-sw":({moduleName:e})=>{if(!e)throw new Error("Unexpected input to 'not-in-sw' error.");return`The '${e}' must be used in a service worker.`},"not-an-array":({moduleName:e,className:t,funcName:a,paramName:s})=>{if(!(e&&t&&a&&s))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${s}' passed into `+`'${e}.${t}.${a}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:a,className:s,funcName:r})=>{if(!(e&&t&&a&&r))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into `+`'${a}.${s?s+".":""}`+`${r}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:a,className:s,funcName:r,isReturnValueProblem:n})=>{if(!e||!a||!r)throw new Error("Unexpected input to 'incorrect-class' error.");return n?"The return value from "+`'${a}.${s?s+".":""}${r}()' `+`must be an instance of class ${e.name}.`:`The parameter '${t}' passed into `+`'${a}.${s?s+".":""}${r}()' `+`must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:a,className:s,funcName:r})=>{if(!(e&&t&&a&&s&&r))throw new Error("Unexpected input to 'missing-a-method' error.");return`${a}.${s}.${r}() expected the `+`'${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>"An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry "+`'${JSON.stringify(e)}' isn't supported. You must supply an array of `+"strings with one or more characters, objects with a url property or Request objects.","add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return"Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL "+`${e._entryId} but different revision details. Workbox is `+"is unable to cache and version the asset correctly. Please remove one of the entries."},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return"An error was thrown by a plugins 'requestWillFetch()' method. "+`The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return"You must provide a name containing at least one character for "+`setCacheDetails({${e}: '...'}). Received a value of `+`'${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return"The route you're trying to unregister was not  previously "+`registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. `+"All instances of backgroundSync.Queue must be given unique names.","expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the `+`'${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:a,paramName:s})=>`The supplied '${s}' parameter was an unsupported type. `+`Please check the docs for ${e}.${t}.${a} for `+"valid input types.","not-array-of-class":({value:e,expectedClass:t,moduleName:a,className:s,funcName:r,paramName:n})=>`The supplied '${n}' parameter must be an array of `+`'${t}' objects. Received '${JSON.stringify(e)},'. `+`Please check the call to ${a}.${s}.${r}() `+"to fix the issue.","max-entries-or-age-required":({moduleName:e,className:t,funcName:a})=>"You must define either config.maxEntries or config.maxAgeSeconds"+`in ${e}.${t}.${a}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:a})=>"You must define either config.statuses or config.headers"+`in ${e}.${t}.${a}`,"invalid-string":({moduleName:e,funcName:t,paramName:a})=>{if(!a||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${a}' parameter must start with `+"'http' (for cross-origin matches) or '/' (for same-origin matches). "+`Please see the docs for ${e}.${t}() for `+"more info."},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return"The 'unit' portion of the Range header must be set to 'bytes'. "+`The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return"Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "+`"${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return"The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "+`"${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:a})=>`The start (${t}) and end (${a}) values in the Range are `+`not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and `+"only 'GET' requests can be cached.","cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not `+"defined.","no-response":({url:e,error:t})=>{let a=`The strategy could not generate a response for '${e}'.`;return t&&(a+=` The underlying error is ${t}.`),a},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed with an HTTP `+`status of ${t}.`,"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is `+"not precached. Please pass in a URL that is precached instead.","add-to-cache-list-conflicting-integrities":({url:e})=>"Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL "+`${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`},n=(e,t={})=>{const a=r[e];if(!a)throw new Error(`Unable to find message for code '${e}'.`);return a(t)};class o extends Error{constructor(e,t){super(n(e,t)),this.name=e,this.details=t}}const i={hasMethod:(e,t,a)=>{if("function"!==typeof e[t])throw a.expectedMethod=t,new o("missing-a-method",a)},isArray:(e,t)=>{if(!Array.isArray(e))throw new o("not-an-array",t)},isInstance:(e,t,a)=>{if(!(e instanceof t))throw a.expectedClass=t,new o("incorrect-class",a)},isOneOf:(e,t,a)=>{if(!t.includes(e))throw a.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new o("invalid-value",a)},isSWEnv:e=>{if(!("ServiceWorkerGlobalScope"in self))throw new o("not-in-sw",{moduleName:e})},isType:(e,t,a)=>{if(typeof e!==t)throw a.expectedType=t,new o("incorrect-type",a)},isArrayOfClass:(e,t,a)=>{const s=new o("not-array-of-class",a);if(!Array.isArray(e))throw s;for(let a of e)if(!(a instanceof t))throw s}},c=new Set;const u={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},h=e=>[u.prefix,e,u.suffix].filter(e=>e&&e.length>0).join("-"),l={updateDetails:e=>{(e=>{for(const t of Object.keys(u))e(t)})(t=>{"string"==typeof e[t]&&(u[t]=e[t])})},getGoogleAnalyticsName:e=>e||h(u.googleAnalytics),getPrecacheName:e=>e||h(u.precache),getPrefix:()=>u.prefix,getRuntimeName:e=>e||h(u.runtime),getSuffix:()=>u.suffix};const d=e=>{const t=new URL(String(e),location.href);return t.origin===location.origin?t.pathname:t.href},m=(e,t)=>e.filter(e=>t in e),p=async({cacheName:e,request:t,event:a,matchOptions:r,plugins:n=[]})=>{const o=await self.caches.open(e),c=await f({plugins:n,request:t,mode:"read"});let u=await o.match(c,r);u?s.debug(`Found a cached response in '${e}'.`):s.debug(`No cached response found in '${e}'.`);for(const t of n)if("cachedResponseWillBeUsed"in t){const s=t.cachedResponseWillBeUsed;(u=await s.call(t,{cacheName:e,event:a,matchOptions:r,cachedResponse:u,request:c}))&&i.isInstance(u,Response,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}return u},g=async({request:e,response:t,event:a,plugins:r=[]})=>{let n=t,o=!1;for(let t of r)if("cacheWillUpdate"in t){o=!0;const s=t.cacheWillUpdate;if((n=await s.call(t,{request:e,response:n,event:a}))&&i.isInstance(n,Response,{moduleName:"Plugin",funcName:"cacheWillUpdate",isReturnValueProblem:!0}),!n)break}return o||(n&&200!==n.status&&(0===n.status?s.warn(`The response for '${e.url}' is an opaque `+"response. The caching strategy that you're using will not cache opaque responses by default."):s.debug(`The response for '${e.url}' returned `+`a status code of '${t.status}' and won't be cached as a `+"result.")),n=n&&200===n.status?n:void 0),n||null},f=async({request:e,mode:t,plugins:a=[]})=>{const s=m(a,"cacheKeyWillBeUsed");let r=e;for(const e of s)"string"==typeof(r=await e.cacheKeyWillBeUsed.call(e,{mode:t,request:r}))&&(r=new Request(r)),i.isInstance(r,Request,{moduleName:"Plugin",funcName:"cacheKeyWillBeUsed",isReturnValueProblem:!0});return r},w={put:async({cacheName:e,request:t,response:a,event:r,plugins:n=[],matchOptions:i})=>{if(t.method&&"GET"!==t.method)throw new o("attempt-to-cache-non-get-request",{url:d(t.url),method:t.method});const u=await f({plugins:n,request:t,mode:"write"});if(!a)throw s.error("Cannot cache non-existent response for "+`'${d(u.url)}'.`),new o("cache-put-with-no-response",{url:d(u.url)});let h=await g({event:r,plugins:n,response:a,request:u});if(!h)return void s.debug(`Response '${d(u.url)}' will `+"not be cached.",h);const l=await self.caches.open(e),w=m(n,"cacheDidUpdate");let y=w.length>0?await p({cacheName:e,matchOptions:i,request:u}):null;s.debug(`Updating the '${e}' cache with a new Response for `+`${d(u.url)}.`);try{await l.put(u,h)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){s.log(`About to run ${c.size} `+"callbacks to clean up caches.");for(const e of c)await e(),s.log(e,"is complete.");s.log("Finished running callbacks.")}(),e}for(let t of w)await t.cacheDidUpdate.call(t,{cacheName:e,event:r,oldResponse:y,newResponse:h,request:u})},match:p};let y;function N(e){e.then(()=>{})}class _{constructor(e,t,{onupgradeneeded:a,onversionchange:s}={}){this._db=null,this._name=e,this._version=t,this._onupgradeneeded=a,this._onversionchange=s||(()=>this.close())}get db(){return this._db}async open(){if(!this._db)return this._db=await new Promise((e,t)=>{let a=!1;setTimeout(()=>{a=!0,t(new Error("The open request was blocked and timed out"))},this.OPEN_TIMEOUT);const s=indexedDB.open(this._name,this._version);s.onerror=()=>t(s.error),s.onupgradeneeded=e=>{a?(s.transaction.abort(),s.result.close()):"function"==typeof this._onupgradeneeded&&this._onupgradeneeded(e)},s.onsuccess=()=>{const t=s.result;a?t.close():(t.onversionchange=this._onversionchange.bind(this),e(t))}}),this}async getKey(e,t){return(await this.getAllKeys(e,t,1))[0]}async getAll(e,t,a){return await this.getAllMatching(e,{query:t,count:a})}async getAllKeys(e,t,a){return(await this.getAllMatching(e,{query:t,count:a,includeKeys:!0})).map(e=>e.key)}async getAllMatching(e,{index:t,query:a=null,direction:s="next",count:r,includeKeys:n=!1}={}){return await this.transaction([e],"readonly",(o,i)=>{const c=o.objectStore(e),u=t?c.index(t):c,h=[],l=u.openCursor(a,s);l.onsuccess=()=>{const e=l.result;e?(h.push(n?e:e.value),r&&h.length>=r?i(h):e.continue()):i(h)}})}async transaction(e,t,a){return await this.open(),await new Promise((s,r)=>{const n=this._db.transaction(e,t);n.onabort=()=>r(n.error),n.oncomplete=()=>s(),a(n,e=>s(e))})}async _call(e,t,a,...s){return await this.transaction([t],a,(a,r)=>{const n=a.objectStore(t),o=n[e].apply(n,s);o.onsuccess=()=>r(o.result)})}close(){this._db&&(this._db.close(),this._db=null)}}_.prototype.OPEN_TIMEOUT=2e3;const b={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,t]of Object.entries(b))for(const a of t)a in IDBObjectStore.prototype&&(_.prototype[a]=async function(t,...s){return await this._call(a,t,e,...s)});const R=async e=>{await new Promise((t,a)=>{const s=indexedDB.deleteDatabase(e);s.onerror=()=>{a(s.error)},s.onblocked=()=>{a(new Error("Delete blocked"))},s.onsuccess=()=>{t()}})},x={fetch:async({request:e,fetchOptions:t,event:a,plugins:r=[]})=>{if("string"==typeof e&&(e=new Request(e)),a instanceof FetchEvent&&a.preloadResponse){const t=await a.preloadResponse;if(t)return s.log("Using a preloaded navigation response for "+`'${d(e.url)}'`),t}i.isInstance(e,Request,{paramName:"request",expectedClass:Request,moduleName:"workbox-core",className:"fetchWrapper",funcName:"wrappedFetch"});const n=m(r,"fetchDidFail"),c=n.length>0?e.clone():null;try{for(let t of r)if("requestWillFetch"in t){const s=t.requestWillFetch,r=e.clone();(e=await s.call(t,{request:r,event:a}))&&i.isInstance(e,Request,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}}catch(e){throw new o("plugin-error-request-will-fetch",{thrownError:e})}let u=e.clone();try{let o;o="navigate"===e.mode?await fetch(e):await fetch(e,t),s.debug("Network request for "+`'${d(e.url)}' returned a response with `+`status '${o.status}'.`);for(const e of r)"fetchDidSucceed"in e&&(o=await e.fetchDidSucceed.call(e,{event:a,request:u,response:o}))&&i.isInstance(o,Response,{moduleName:"Plugin",funcName:"fetchDidSucceed",isReturnValueProblem:!0});return o}catch(t){s.error("Network request for "+`'${d(e.url)}' threw an error.`,t);for(const e of n)await e.fetchDidFail.call(e,{error:t,event:a,originalRequest:c.clone(),request:u.clone()});throw t}}};async function q(e,t){const a=e.clone(),s={headers:new Headers(a.headers),status:a.status,statusText:a.statusText},r=t?t(s):s,n=function(){if(void 0===y){const e=new Response("");if("body"in e)try{new Response(e.body),y=!0}catch(e){y=!1}y=!1}return y}()?a.body:await a.blob();return new Response(n,r)}function v(){self.addEventListener("install",()=>self.skipWaiting())}a(1);const E=[],T={get:()=>E,add(e){E.push(...e)}};const $="__WB_REVISION__";function k(e){if(!e)throw new o("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:a}=e;if(!a)throw new o("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(a,location.href);return{cacheKey:e.href,url:e.href}}const s=new URL(a,location.href),r=new URL(a,location.href);return s.searchParams.set($,t),{cacheKey:s.href,url:r.href}}const S=(e,t)=>{s.groupCollapsed(e);for(const e of t)s.log(e);s.groupEnd()};function U(e,t){if(0!==t.length){s.groupCollapsed(e);for(const e of t)s.log(e);s.groupEnd()}}class C{constructor(e){this._cacheName=l.getPrecacheName(e),this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map}addToCacheList(e){i.isArray(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const t=[];for(const a of e){"string"==typeof a?t.push(a):a&&void 0===a.revision&&t.push(a.url);const{cacheKey:e,url:r}=k(a),n="string"!=typeof a&&a.revision?"reload":"default";if(this._urlsToCacheKeys.has(r)&&this._urlsToCacheKeys.get(r)!==e)throw new o("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(r),secondEntry:e});if("string"!=typeof a&&a.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==a.integrity)throw new o("add-to-cache-list-conflicting-integrities",{url:r});this._cacheKeysToIntegrities.set(e,a.integrity)}if(this._urlsToCacheKeys.set(r,e),this._urlsToCacheModes.set(r,n),t.length>0){const e="Workbox is precaching URLs without revision "+`info: ${t.join(", ")}\nThis is generally NOT safe. `+"Learn more at https://bit.ly/wb-precache";s.warn(e)}}}async install({event:e,plugins:t}={}){t&&i.isArray(t,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"install",paramName:"plugins"});const a=[],r=[],n=await self.caches.open(this._cacheName),o=await n.keys(),c=new Set(o.map(e=>e.url));for(const[e,t]of this._urlsToCacheKeys)c.has(t)?r.push(e):a.push({cacheKey:t,url:e});const u=a.map(({cacheKey:a,url:s})=>{const r=this._cacheKeysToIntegrities.get(a),n=this._urlsToCacheModes.get(s);return this._addURLToCache({cacheKey:a,cacheMode:n,event:e,integrity:r,plugins:t,url:s})});await Promise.all(u);const h=a.map(e=>e.url);return function(e,t){const a=e.length,r=t.length;if(a||r){let n=`Precaching ${a} file${1===a?"":"s"}.`;r>0&&(n+=` ${r} `+`file${1===r?" is":"s are"} already cached.`),s.groupCollapsed(n),U("View newly precached URLs.",e),U("View previously precached URLs.",t),s.groupEnd()}}(h,r),{updatedURLs:h,notUpdatedURLs:r}}async activate(){const e=await self.caches.open(this._cacheName),t=await e.keys(),a=new Set(this._urlsToCacheKeys.values()),r=[];for(const s of t)a.has(s.url)||(await e.delete(s),r.push(s.url));return function(e){const t=e.length;t>0&&(s.groupCollapsed("During precaching cleanup, "+`${t} cached `+`request${1===t?" was":"s were"} deleted.`),S("Deleted Cache Requests",e),s.groupEnd())}(r),{deletedURLs:r}}async _addURLToCache({cacheKey:e,url:t,cacheMode:a,event:s,plugins:r,integrity:n}){const i=new Request(t,{integrity:n,cache:a,credentials:"same-origin"});let c,u=await x.fetch({event:s,plugins:r,request:i});for(const e of r||[])"cacheWillUpdate"in e&&(c=e);if(!(c?await c.cacheWillUpdate({event:s,request:i,response:u}):u.status<400))throw new o("bad-precaching-response",{url:t,status:u.status});u.redirected&&(u=await q(u)),await w.put({event:s,plugins:r,response:u,request:e===t?i:new Request(e),cacheName:this._cacheName,matchOptions:{ignoreSearch:!0}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}async matchPrecache(e){const t=e instanceof Request?e.url:e,a=this.getCacheKeyForURL(t);if(a){return(await self.caches.open(this._cacheName)).match(a)}}createHandler(e=!0){return async({request:t})=>{try{const a=await this.matchPrecache(t);if(a)return a;throw new o("missing-precache-entry",{cacheName:this._cacheName,url:t instanceof Request?t.url:t})}catch(a){if(e)return s.debug("Unable to respond with precached response. Falling back to network.",a),fetch(t);throw a}}}createHandlerBoundToURL(e,t=!0){if(!this.getCacheKeyForURL(e))throw new o("non-precached-url",{url:e});const a=this.createHandler(t),s=new Request(e);return()=>a({request:s})}}let A;const L=()=>(A||(A=new C),A);const P=(e,t)=>{const a=L().getURLsToCacheKeys();for(const s of function*(e,{ignoreURLParametersMatching:t,directoryIndex:a,cleanURLs:s,urlManipulation:r}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const a of[...e.searchParams.keys()])t.some(e=>e.test(a))&&e.searchParams.delete(a);return e}(n,t);if(yield o.href,a&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=a,yield e.href}if(s){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(r){const e=r({url:n});for(const t of e)yield t.href}}(e,t)){const e=a.get(s);if(e)return e}},O=({ignoreURLParametersMatching:e=[/^utm_/],directoryIndex:t="index.html",cleanURLs:a=!0,urlManipulation:r}={})=>{const n=l.getPrecacheName();self.addEventListener("fetch",o=>{const i=P(o.request.url,{cleanURLs:a,directoryIndex:t,ignoreURLParametersMatching:e,urlManipulation:r});if(!i)return void s.debug("Precaching did not find a match for "+d(o.request.url));let c=self.caches.open(n).then(e=>e.match(i)).then(e=>e||(s.warn("The precached response for "+`${d(i)} in ${n} was not found. `+"Falling back to the network instead."),fetch(i)));c=c.then(e=>(s.groupCollapsed("Precaching is responding to: "+d(o.request.url)),s.log(`Serving the precached url: ${i}`),s.groupCollapsed("View request details here."),s.log(o.request),s.groupEnd(),s.groupCollapsed("View response details here."),s.log(e),s.groupEnd(),s.groupEnd(),e)),o.respondWith(c)})};let I=!1;const D=e=>{const t=L(),a=T.get();e.waitUntil(t.install({event:e,plugins:a}).catch(e=>{throw s.error("Service worker installation failed. It will be retried automatically during the next navigation."),e}))},M=e=>{const t=L();e.waitUntil(t.activate())};i.isSWEnv("workbox-precaching");a(2);const j="GET",K=["DELETE","GET","HEAD","PATCH","POST","PUT"],W=e=>e&&"object"==typeof e?(i.hasMethod(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(i.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class F{constructor(e,t,a=j){i.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),a&&i.isOneOf(a,K,{paramName:"method"}),this.handler=W(t),this.match=e,this.method=a}}class B extends F{constructor(e,t,a){i.isInstance(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super(({url:t})=>{const a=e.exec(t.href);if(a){if(t.origin===location.origin||0===a.index)return a.slice(1);s.debug(`The regular expression '${e}' only partially matched `+`against the cross-origin URL '${t}'. RegExpRoute's will only `+"handle cross-origin requests if they match the entire URL.")}},t,a)}}class H{constructor(){this._routes=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,a=this.handleRequest({request:t,event:e});a&&e.respondWith(a)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;s.debug("Caching URLs from the window",t.urlsToCache);const a=Promise.all(t.urlsToCache.map(e=>{"string"==typeof e&&(e=[e]);const t=new Request(...e);return this.handleRequest({request:t})}));e.waitUntil(a),e.ports&&e.ports[0]&&a.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){i.isInstance(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const a=new URL(e.url,location.href);if(!a.protocol.startsWith("http"))return void s.debug("Workbox Router only supports URLs that start with 'http'.");let r,{params:n,route:o}=this.findMatchingRoute({url:a,request:e,event:t}),c=o&&o.handler,u=[];if(c&&(u.push(["Found a route to handle this request:",o]),n&&u.push(["Passing the following params to the route's handler:",n])),!c&&this._defaultHandler&&(u.push("Failed to find a matching route. Falling back to the default handler."),c=this._defaultHandler),c){s.groupCollapsed(`Router is responding to: ${d(a)}`),u.forEach(e=>{Array.isArray(e)?s.log(...e):s.log(e)}),s.groupEnd();try{r=c.handle({url:a,request:e,event:t,params:n})}catch(e){r=Promise.reject(e)}return r instanceof Promise&&this._catchHandler&&(r=r.catch(r=>(s.groupCollapsed("Error thrown when responding to: "+` ${d(a)}. Falling back to Catch Handler.`),s.error("Error thrown by:",o),s.error(r),s.groupEnd(),this._catchHandler.handle({url:a,request:e,event:t})))),r}s.debug(`No route found for: ${d(a)}`)}findMatchingRoute({url:e,request:t,event:a}){i.isInstance(e,URL,{moduleName:"workbox-routing",className:"Router",funcName:"findMatchingRoute",paramName:"options.url"}),i.isInstance(t,Request,{moduleName:"workbox-routing",className:"Router",funcName:"findMatchingRoute",paramName:"options.request"});const s=this._routes.get(t.method)||[];for(const r of s){let s,n=r.match({url:e,request:t,event:a});if(n)return s=n,Array.isArray(n)&&0===n.length?s=void 0:n.constructor===Object&&0===Object.keys(n).length?s=void 0:"boolean"==typeof n&&(s=void 0),{route:r,params:s}}return{}}setDefaultHandler(e){this._defaultHandler=W(e)}setCatchHandler(e){this._catchHandler=W(e)}registerRoute(e){i.isType(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),i.hasMethod(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),i.isType(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),i.hasMethod(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),i.isType(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new o("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new o("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let V;const G=()=>(V||((V=new H).addFetchListener(),V.addCacheListener()),V);function Q(e,t,a){let r;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new o("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t="[*:?+]";(e.startsWith("http")?n.pathname:e).match(new RegExp(`${t}`))&&s.debug("The '$capture' parameter contains an Express-style wildcard "+`character (${t}). Strings are now always interpreted as `+"exact matches; use a RegExp for partial or wildcard matches.")}r=new F(({url:t})=>(t.pathname===n.pathname&&t.origin!==n.origin&&s.debug(`${e} only partially matches the cross-origin URL `+`${t}. This route will only handle cross-origin requests `+"if they match the entire URL."),t.href===n.href),t,a)}else if(e instanceof RegExp)r=new B(e,t,a);else if("function"==typeof e)r=new F(e,t,a);else{if(!(e instanceof F))throw new o("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});r=e}return G().registerRoute(r),r}a(3);const J={strategyStart:(e,t)=>`Using ${e} to respond to '${d(t.url)}'`,printFinalResponse:e=>{e&&(s.groupCollapsed("View the final response here."),s.log(e||"[No response returned]"),s.groupEnd())}};const Y={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};a(5);const z="workbox-expiration",Z="cache-entries",X=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class ee{constructor(e){this._cacheName=e,this._db=new _(z,1,{onupgradeneeded:e=>this._handleUpgrade(e)})}_handleUpgrade(e){const t=e.target.result.createObjectStore(Z,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),R(this._cacheName)}async setTimestamp(e,t){const a={url:e=X(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)};await this._db.put(Z,a)}async getTimestamp(e){return(await this._db.get(Z,this._getId(e))).timestamp}async expireEntries(e,t){const a=await this._db.transaction(Z,"readwrite",(a,s)=>{const r=a.objectStore(Z).index("timestamp").openCursor(null,"prev"),n=[];let o=0;r.onsuccess=()=>{const a=r.result;if(a){const s=a.value;s.cacheName===this._cacheName&&(e&&s.timestamp<e||t&&o>=t?n.push(a.value):o++),a.continue()}else s(n)}}),s=[];for(const e of a)await this._db.delete(Z,e.id),s.push(e.url);return s}_getId(e){return this._cacheName+"|"+X(e)}}class te{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,i.isType(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new o("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&i.isType(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&i.isType(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._cacheName=e,this._timestampModel=new ee(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),a=await self.caches.open(this._cacheName);for(const e of t)await a.delete(e);t.length>0?(s.groupCollapsed(`Expired ${t.length} `+`${1===t.length?"entry":"entries"} and removed `+`${1===t.length?"it":"them"} from the `+`'${this._cacheName}' cache.`),s.log(`Expired the following ${1===t.length?"URL":"URLs"}:`),t.forEach(e=>s.log(`    ${e}`)),s.groupEnd()):s.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,N(this.expireEntries()))}async updateTimestamp(e){i.isType(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){return await this._timestampModel.getTimestamp(e)<Date.now()-1e3*this._maxAgeSeconds}throw new o("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}a(4);const ae=3,se="workbox-background-sync",re="requests",ne="queueName";class oe{constructor(e){this._queueName=e,this._db=new _(se,ae,{onupgradeneeded:this._upgradeDb})}async pushEntry(e){i.isType(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry"}),i.isType(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry.requestData"}),delete e.id,e.queueName=this._queueName,await this._db.add(re,e)}async unshiftEntry(e){i.isType(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry"}),i.isType(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry.requestData"});const[t]=await this._db.getAllMatching(re,{count:1});t?e.id=t.id-1:delete e.id,e.queueName=this._queueName,await this._db.add(re,e)}async popEntry(){return this._removeEntry({direction:"prev"})}async shiftEntry(){return this._removeEntry({direction:"next"})}async getAll(){return await this._db.getAllMatching(re,{index:ne,query:IDBKeyRange.only(this._queueName)})}async deleteEntry(e){await this._db.delete(re,e)}async _removeEntry({direction:e}){const[t]=await this._db.getAllMatching(re,{direction:e,index:ne,query:IDBKeyRange.only(this._queueName),count:1});if(t)return await this.deleteEntry(t.id),t}_upgradeDb(e){const t=e.target.result;e.oldVersion>0&&e.oldVersion<ae&&t.objectStoreNames.contains(re)&&t.deleteObjectStore(re),t.createObjectStore(re,{autoIncrement:!0,keyPath:"id"}).createIndex(ne,ne,{unique:!1})}}const ie=["method","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive"];class ce{static async fromRequest(e){const t={url:e.url,headers:{}};"GET"!==e.method&&(t.body=await e.clone().arrayBuffer());for(const[a,s]of e.headers.entries())t.headers[a]=s;for(const a of ie)void 0!==e[a]&&(t[a]=e[a]);return new ce(t)}constructor(e){i.isType(e,"object",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData"}),i.isType(e.url,"string",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData.url"}),"navigate"===e.mode&&(e.mode="same-origin"),this._requestData=e}toObject(){const e=Object.assign({},this._requestData);return e.headers=Object.assign({},this._requestData.headers),e.body&&(e.body=e.body.slice(0)),e}toRequest(){return new Request(this._requestData.url,this._requestData)}clone(){return new ce(this.toObject())}}const ue="workbox-background-sync",he=10080,le=new Set;class de{constructor(e,{onSync:t,maxRetentionTime:a}={}){if(this._syncInProgress=!1,this._requestsAddedDuringSync=!1,le.has(e))throw new o("duplicate-queue-name",{name:e});le.add(e),this._name=e,this._onSync=t||this.replayRequests,this._maxRetentionTime=a||he,this._queueStore=new oe(this._name),this._addSyncListener()}get name(){return this._name}async pushRequest(e){i.isType(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry"}),i.isInstance(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry.request"}),await this._addRequest(e,"push")}async unshiftRequest(e){i.isType(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry"}),i.isInstance(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry.request"}),await this._addRequest(e,"unshift")}async popRequest(){return this._removeRequest("pop")}async shiftRequest(){return this._removeRequest("shift")}async getAll(){const e=await this._queueStore.getAll(),t=Date.now(),a=[];for(const s of e){const e=60*this._maxRetentionTime*1e3;t-s.timestamp>e?await this._queueStore.deleteEntry(s.id):a.push(me(s))}return a}async _addRequest({request:e,metadata:t,timestamp:a=Date.now()},r){const n={requestData:(await ce.fromRequest(e.clone())).toObject(),timestamp:a};t&&(n.metadata=t),await this._queueStore[`${r}Entry`](n),s.log(`Request for '${d(e.url)}' has `+`been added to background sync queue '${this._name}'.`),this._syncInProgress?this._requestsAddedDuringSync=!0:await this.registerSync()}async _removeRequest(e){const t=Date.now(),a=await this._queueStore[`${e}Entry`]();if(a){const s=60*this._maxRetentionTime*1e3;return t-a.timestamp>s?this._removeRequest(e):me(a)}}async replayRequests(){let e;for(;e=await this.shiftRequest();)try{await fetch(e.request.clone()),s.log(`Request for '${d(e.request.url)}'`+`has been replayed in queue '${this._name}'`)}catch(t){throw await this.unshiftRequest(e),s.log(`Request for '${d(e.request.url)}'`+`failed to replay, putting it back in queue '${this._name}'`),new o("queue-replay-failed",{name:this._name})}s.log(`All requests in queue '${this.name}' have successfully `+"replayed; the queue is now empty!")}async registerSync(){if("sync"in self.registration)try{await self.registration.sync.register(`${ue}:${this._name}`)}catch(e){s.warn(`Unable to register sync event for '${this._name}'.`,e)}}_addSyncListener(){"sync"in self.registration?self.addEventListener("sync",e=>{if(e.tag===`${ue}:${this._name}`){s.log(`Background sync for tag '${e.tag}'`+"has been received");const t=async()=>{let t;this._syncInProgress=!0;try{await this._onSync({queue:this})}catch(e){throw t=e}finally{!this._requestsAddedDuringSync||t&&!e.lastChance||await this.registerSync(),this._syncInProgress=!1,this._requestsAddedDuringSync=!1}};e.waitUntil(t())}}):(s.log("Background sync replaying without background sync event"),this._onSync({queue:this}))}static get _queueNames(){return le}}const me=e=>{const t={request:new ce(e.requestData).toRequest(),timestamp:e.timestamp};return e.metadata&&(t.metadata=e.metadata),t};var pe;!function(e){e.pending="pending",e.app="app",e.auth="auth",e.noMatch="noMatch",e.quest="quest"}(pe||(pe={}));var ge,fe,we,ye,Ne;!function(e){e.SET_ADDITIONAL_API_CACHED_RESOURCES="SET_ADDITIONAL_API_CACHED_RESOURCES",e.SET_MD_FILES_TO_CACHE="SET_MD_FILES_TO_CACHE",e.SET_ENVIRONMENTS_VARIABLES="SET_ENVIRONMENTS_VARIABLES",e.SKIP_WAITING="SKIP_WAITING"}(ge||(ge={})),function(e){e.DISABLED="disabled",e.INSTALLING="installing",e.INSTALLED="installed",e.ACTIVATING="activating",e.ACTIVATED="activated"}(fe||(fe={})),function(e){e[e.ENTER=13]="ENTER",e[e.ESC=27]="ESC",e[e.TAB=9]="TAB",e[e.SPACE=32]="SPACE"}(we||(we={})),function(e){e[e.ZERO_WIDTH_NO_BREAK_SPASE=65279]="ZERO_WIDTH_NO_BREAK_SPASE"}(ye||(ye={})),function(e){e.OBJECT="object",e.OBJECT_FACT="schedule_fact",e.PROJECT="project",e.AVATAR="avatar"}(Ne||(Ne={}));var _e;!function(e){e.OBJECT="object",e.PROJECT="project"}(_e||(_e={}));var be,Re;v(),self.addEventListener("activate",()=>self.clients.claim()),function(e){L().addToCacheList(e),e.length>0&&(self.addEventListener("install",D),self.addEventListener("activate",M))}(self.__precacheManifest),function(e){I||(O(e),I=!0)}(be),Q(new class extends F{constructor(e,{allowlist:t=[/./],denylist:a=[]}={}){i.isArrayOfClass(t,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.allowlist"}),i.isArrayOfClass(a,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.denylist"}),super(e=>this._match(e),e),this._allowlist=t,this._denylist=a}_match({url:e,request:t}){if(t&&"navigate"!==t.mode)return!1;const a=e.pathname+e.search;for(const e of this._denylist)if(e.test(a))return s.log(`The navigation route ${a} is not `+"being used, since the URL matches this denylist pattern: "+`${e}`),!1;return this._allowlist.some(e=>e.test(a))?(s.debug(`The navigation route ${a} `+"is being used."),!0):(s.log(`The navigation route ${a} is not `+"being used, since the URL being navigated to doesn't match the allowlist."),!1)}}((Re="/index.html",L().createHandlerBoundToURL(Re)))),Q(/\.(?:png|gif|jpg|jpeg|ico|svg)$/,new class{constructor(e={}){this._cacheName=l.getRuntimeName(e.cacheName),this._plugins=e.plugins||[],this._fetchOptions=e.fetchOptions,this._matchOptions=e.matchOptions}async handle({event:e,request:t}){const a=[];"string"==typeof t&&(t=new Request(t)),i.isInstance(t,Request,{moduleName:"workbox-strategies",className:"CacheFirst",funcName:"makeRequest",paramName:"request"});let r,n=await w.match({cacheName:this._cacheName,request:t,event:e,matchOptions:this._matchOptions,plugins:this._plugins});if(n)a.push(`Found a cached response in the '${this._cacheName}' cache.`);else{a.push(`No response found in the '${this._cacheName}' cache. `+"Will respond with a network request.");try{n=await this._getFromNetwork(t,e)}catch(e){r=e}n?a.push("Got response from network."):a.push("Unable to get a response from the network.")}s.groupCollapsed(J.strategyStart("CacheFirst",t));for(let e of a)s.log(e);if(J.printFinalResponse(n),s.groupEnd(),!n)throw new o("no-response",{url:t.url,error:r});return n}async _getFromNetwork(e,t){const a=await x.fetch({request:e,event:t,fetchOptions:this._fetchOptions,plugins:this._plugins}),r=a.clone(),n=w.put({cacheName:this._cacheName,request:e,response:r,event:t,plugins:this._plugins});if(t)try{t.waitUntil(n)}catch(t){s.warn("Unable to ensure service worker stays alive when "+`updating cache for '${d(e.url)}'.`)}return a}}({cacheName:"images",plugins:[new class{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:a,cachedResponse:r})=>{if(!r)return null;let n=this._isResponseDateFresh(r);const o=this._getCacheExpiration(a);N(o.expireEntries());const i=o.updateTimestamp(t.url);if(e)try{e.waitUntil(i)}catch(t){"request"in e&&s.warn("Unable to ensure service worker stays alive when updating cache entry for "+`'${d(e.request.url)}'.`)}return n?r:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{i.isType(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),i.isInstance(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const a=this._getCacheExpiration(e);await a.updateTimestamp(t.url),await a.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new o("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});var t;e.maxEntries&&i.isType(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&i.isType(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&(t=()=>this.deleteCacheAndMetadata(),i.isType(t,"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),c.add(t),s.log("Registered a callback to respond to quota errors.",t))}_getCacheExpiration(e){if(e===l.getRuntimeName())throw new o("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new te(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);return null===t||t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}({maxEntries:60,maxAgeSeconds:2592e3})]})),Q(/api\.*/,new class{constructor(e={}){if(this._cacheName=l.getRuntimeName(e.cacheName),e.plugins){let t=e.plugins.some(e=>!!e.cacheWillUpdate);this._plugins=t?e.plugins:[Y,...e.plugins]}else this._plugins=[Y];this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&i.isType(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:"NetworkFirst",funcName:"constructor",paramName:"networkTimeoutSeconds"}),this._fetchOptions=e.fetchOptions,this._matchOptions=e.matchOptions}async handle({event:e,request:t}){const a=[];"string"==typeof t&&(t=new Request(t)),i.isInstance(t,Request,{moduleName:"workbox-strategies",className:"NetworkFirst",funcName:"handle",paramName:"makeRequest"});const r=[];let n;if(this._networkTimeoutSeconds){const{id:s,promise:o}=this._getTimeoutPromise({request:t,event:e,logs:a});n=s,r.push(o)}const c=this._getNetworkPromise({timeoutId:n,request:t,event:e,logs:a});r.push(c);let u=await Promise.race(r);u||(u=await c),s.groupCollapsed(J.strategyStart("NetworkFirst",t));for(let e of a)s.log(e);if(J.printFinalResponse(u),s.groupEnd(),!u)throw new o("no-response",{url:t.url});return u}_getTimeoutPromise({request:e,logs:t,event:a}){let s;return{promise:new Promise(r=>{s=setTimeout(async()=>{t.push("Timing out the network response at "+`${this._networkTimeoutSeconds} seconds.`),r(await this._respondFromCache({request:e,event:a}))},1e3*this._networkTimeoutSeconds)}),id:s}}async _getNetworkPromise({timeoutId:e,request:t,logs:a,event:r}){let n,o;try{o=await x.fetch({request:t,event:r,fetchOptions:this._fetchOptions,plugins:this._plugins})}catch(e){n=e}if(e&&clearTimeout(e),o?a.push("Got response from network."):a.push("Unable to get a response from the network. Will respond with a cached response."),n||!o)(o=await this._respondFromCache({request:t,event:r}))?a.push(`Found a cached response in the '${this._cacheName}'`+" cache."):a.push(`No response found in the '${this._cacheName}' cache.`);else{const e=o.clone(),a=w.put({cacheName:this._cacheName,request:t,response:e,event:r,plugins:this._plugins});if(r)try{r.waitUntil(a)}catch(e){s.warn("Unable to ensure service worker stays alive when "+`updating cache for '${d(t.url)}'.`)}}return o}_respondFromCache({event:e,request:t}){return w.match({cacheName:this._cacheName,request:t,event:e,matchOptions:this._matchOptions,plugins:this._plugins})}}({cacheName:"api-requests",plugins:[new class{constructor(e,t){this.fetchDidFail=async({request:e})=>{await this._queue.pushRequest({request:e})},this._queue=new de(e,t)}}("api-requests-sync",{maxRetentionTime:1440})]}),"POST"),self.addEventListener("message",function(e){if(e.data.message&&e.data.message.length>0)switch(e.data.type){case ge.SKIP_WAITING:v()}})}]);